package com.bitwig.multisample;

import org.junit.Assert;
import org.junit.Test;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;

public class MultisampleTest
{
   private Multisample createDummyMultisample()
   {
      final var multisample = new Multisample();

      multisample.name = "Dummy";
      multisample.generator = "MultisampleTest";
      multisample.category = "Winds";
      multisample.creator = "ACME";
      multisample.description = "Test multisample generated by " + multisample.generator;
      multisample.keywords.add("test");
      multisample.keywords.add("dummy");

      return multisample;
   }

   @Test
   public void saveMultisample() throws IOException
   {
      var multisample = createDummyMultisample();

      new File("target").mkdirs();
      Util.save(multisample, new HashMap(), new File("target/test.multisample"));
      Util.saveXML(multisample, new File("target/test.multisample.xml"));
   }

   @Test
   public void validateMultisample() throws IOException
   {
      var multisample = createDummyMultisample();
      Util.validate(multisample);
   }

   @Test
   public void saveAndLoadMultisample() throws IOException
   {
      var multisample = createDummyMultisample();

      final var file = File.createTempFile("testfile", ".multisample");
      Util.save(multisample, new HashMap(), file);

      final var loadedMultisample = Util.loadMultisample(file);

      Assert.assertEquals(multisample.groups.size(), loadedMultisample.groups.size());
      Assert.assertEquals(multisample.samples.size(), loadedMultisample.samples.size());
   }

   @Test
   public void writeSchema() throws IOException
   {
      new File("target").mkdirs();
      Util.exportSchema(new File("target/multisample.xs"), Multisample.class);
   }

   @Test
   public void loadBitwigMultisample() throws IOException
   {
      File file = new File("test-data/Toy Xylophone.multisample");
      Assert.assertTrue(file.exists());
      Assert.assertTrue(file.isFile());

      // try reading multisample first
      var project = Util.loadMultisample(file);
      Assert.assertNotNull(project);

      Assert.assertEquals(9, project.samples.size());

      for (Sample sample : project.samples)
      {
         InputStream inputStream = Util.streamEmbedded(file, sample.file);
         byte[] data = inputStream.readAllBytes();

         Assert.assertTrue(data.length > 10);
      }

   }

   @Test
   public void loadEmbeddedFile() throws IOException
   {
      File file = new File("test-data/Toy Xylophone.multisample");
      Assert.assertTrue(file.exists());
      Assert.assertTrue(file.isFile());

      // try reading multisample first
      var project = Util.loadMultisample(file);
      Assert.assertNotNull(project);

      InputStream inputStream = Util.streamEmbedded(file, "Toy Xylo D2.wav");

      byte[] data = inputStream.readAllBytes();

      Assert.assertEquals(65660, data.length);
   }
}
